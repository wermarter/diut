name: Deploy production

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  web-app:
    runs-on: ubuntu-22.04
    environment: web-app-production

    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Set environment variables
        working-directory: ./apps/web-app
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> ./.env
        # echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> $GITHUB_ENV

      - name: Build web app
        run: yarn nx run @diut/web-app:build

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'delegate to the next step'

      - name: Add known hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy with rsync
        run: rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" ./apps/web-app/dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/web-app

  access-server:
    runs-on: ubuntu-22.04
    environment: access-server-production

    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Build access server
        run: yarn nx run @diut/access-server:build

      - name: Set environment variables
        working-directory: ./apps/access-server
        run: |
          echo "AUTH_JWT_SECRET=${{ secrets.AUTH_JWT_SECRET }}" >> ./dist/.env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> ./dist/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> ./dist/.env
          echo "STORAGE_ACCESS_KEY=${{ secrets.STORAGE_ACCESS_KEY }}" >> ./dist/.env
          echo "STORAGE_SECRET_KEY=${{ secrets.STORAGE_SECRET_KEY }}" >> ./dist/.env

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'delegate to the next step'

      - name: Add known hosts
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Update dependency (1)
        run: rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" --exclude '@diut' ./node_modules/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/access-server/node_modules

      - name: Update dependency (2)
        run: rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" ./apps/access-server/node_modules/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/access-server/node_modules

      - name: Deploy common lib with rsync
        run: rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" --rsync-path="mkdir -p /var/www/access-server/node_modules/@diut/common && rsync" ./libs/common/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/access-server/node_modules/@diut/common

      - name: Deploy with rsync
        run: rsync -avz -e "ssh -p ${{ secrets.SSH_PORT }}" ./apps/access-server/dist/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/access-server

      - name: Restart server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "source ~/.nvm/nvm.sh && pm2 restart diut-production"
