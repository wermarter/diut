kube-prometheus-stack:
  fullnameOverride: prometheus-stack

  crds:
    enabled: false

  alertmanager:
    fullnameOverride: alertmanager

  grafana:
    fullnameOverride: grafana
    replicas: 2
    defaultDashboardsTimezone: browser
    admin:
      existingSecret: grafana-credentials
      userKey: admin-user
      passwordKey: admin-password
    persistence:
      enabled: true
      size: 2Gi
    service:
      type: 'LoadBalancer'
      loadBalancerIP: '10.1.1.204'

  kubelet:
    serviceMonitor:
      metricRelabelings:
        - action: replace
          sourceLabels:
            - node
          targetLabel: instance

  kubeControllerManager:
    enabled: false

  kubeDns:
    enabled: false

  kubeEtcd:
    enabled: false

  kubeScheduler:
    enabled: false

  kubeProxy:
    enabled: false

  kube-state-metrics:
    prometheus:
      monitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

  nodeExporter:
    serviceMonitor:
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

  prometheus-node-exporter:
    prometheus:
      monitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

  prometheusOperator:
    fullnameOverride: prometheus-operator

  prometheus:
    serviceMonitor:
      relabelings:
        - sourceLabels:
            - container
          targetLabel: cluster
          replacement: prometheus
    prometheusSpec:
      replicas: 1
      replicaExternalLabelName: 'replica'
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ['ReadWriteOnce']
            resources:
              requests:
                storage: 50Gi
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 7d
      # additionalScrapeConfigs:
      #   # Example scrape config for pods
      #   #
      #   # The relabeling allows the actual pod scrape endpoint to be configured via the
      #   # following annotations:
      #   #
      #   # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`,
      #   # except if `prometheus.io/scrape-slow` is set to `true` as well.
      #   # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      #   # to set this to `https` & most likely set the `tls_config` of the scrape config.
      #   # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      #   # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      #   - job_name: 'kubernetes-pods'
      #     honor_labels: true

      #     kubernetes_sd_configs:
      #       - role: pod

      #     relabel_configs:
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #         action: keep
      #         regex: true
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
      #         action: drop
      #         regex: true
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      #         action: replace
      #         regex: (https?)
      #         target_label: __scheme__
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #         action: replace
      #         target_label: __metrics_path__
      #         regex: (.+)
      #       - source_labels:
      #           [
      #             __meta_kubernetes_pod_annotation_prometheus_io_port,
      #             __meta_kubernetes_pod_ip,
      #           ]
      #         action: replace
      #         regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
      #         replacement: '[$2]:$1'
      #         target_label: __address__
      #       - source_labels:
      #           [
      #             __meta_kubernetes_pod_annotation_prometheus_io_port,
      #             __meta_kubernetes_pod_ip,
      #           ]
      #         action: replace
      #         regex: (\d+);((([0-9]+?)(\.|$)){4})
      #         replacement: $2:$1
      #         target_label: __address__
      #       - action: labelmap
      #         regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
      #         replacement: __param_$1
      #       - action: labelmap
      #         regex: __meta_kubernetes_pod_label_(.+)
      #       - source_labels: [__meta_kubernetes_namespace]
      #         action: replace
      #         target_label: namespace
      #       - source_labels: [__meta_kubernetes_pod_name]
      #         action: replace
      #         target_label: pod
      #       - source_labels: [__meta_kubernetes_pod_phase]
      #         regex: Pending|Succeeded|Failed|Completed
      #         action: drop
      #       - source_labels: [__meta_kubernetes_pod_node_name]
      #         action: replace
      #         target_label: node

      #   # Example Scrape config for pods which should be scraped slower. An useful example
      #   # would be stackriver-exporter which queries an API on every scrape of the pod
      #   #
      #   # The relabeling allows the actual pod scrape endpoint to be configured via the
      #   # following annotations:
      #   #
      #   # * `prometheus.io/scrape-slow`: Only scrape pods that have a value of `true`
      #   # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      #   # to set this to `https` & most likely set the `tls_config` of the scrape config.
      #   # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      #   # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      #   - job_name: 'kubernetes-pods-slow'
      #     honor_labels: true

      #     scrape_interval: 5m
      #     scrape_timeout: 30s

      #     kubernetes_sd_configs:
      #       - role: pod

      #     relabel_configs:
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
      #         action: keep
      #         regex: true
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      #         action: replace
      #         regex: (https?)
      #         target_label: __scheme__
      #       - source_labels:
      #           [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #         action: replace
      #         target_label: __metrics_path__
      #         regex: (.+)
      #       - source_labels:
      #           [
      #             __meta_kubernetes_pod_annotation_prometheus_io_port,
      #             __meta_kubernetes_pod_ip,
      #           ]
      #         action: replace
      #         regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
      #         replacement: '[$2]:$1'
      #         target_label: __address__
      #       - source_labels:
      #           [
      #             __meta_kubernetes_pod_annotation_prometheus_io_port,
      #             __meta_kubernetes_pod_ip,
      #           ]
      #         action: replace
      #         regex: (\d+);((([0-9]+?)(\.|$)){4})
      #         replacement: $2:$1
      #         target_label: __address__
      #       - action: labelmap
      #         regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
      #         replacement: __param_$1
      #       - action: labelmap
      #         regex: __meta_kubernetes_pod_label_(.+)
      #       - source_labels: [__meta_kubernetes_namespace]
      #         action: replace
      #         target_label: namespace
      #       - source_labels: [__meta_kubernetes_pod_name]
      #         action: replace
      #         target_label: pod
      #       - source_labels: [__meta_kubernetes_pod_phase]
      #         regex: Pending|Succeeded|Failed|Completed
      #         action: drop
      #       - source_labels: [__meta_kubernetes_pod_node_name]
      #         action: replace
      #         target_label: node

  thanosRuler:
    enabled: false
